from html import parser
from config.config_manager import load_config, save_config
from core.db.connection import test_connection
from core.db.initializer import initialize_database
# from ui.forms.db_config_dialog import show_config_dialog
from ui.forms.db_selector_dialog import select_database
from logs.logger import log_event
from dataclasses import dataclass

from PyQt6.QtWidgets import QApplication, QLabel, QWidget, QVBoxLayout
import sys
import importlib
import importlib.util
import os
import argparse

@dataclass
class AppConfig:
    is_admin: bool
    extensions: list
    # —ñ–Ω—à—ñ –ø–æ–ª—è...

def launch_main_ui(config):
    app = QApplication.instance() 
    app.setStyle("Fusion") #WindowsVista

def load_extensions():
    extensions = []
    ext_dir = os.path.join(os.path.dirname(__file__), "extensions")
    for root, dirs, files in os.walk(ext_dir):
        for fname in files:
            if fname.endswith(".py") and fname != "__init__.py":
                rel_path = os.path.relpath(os.path.join(root, fname), os.path.dirname(__file__))
                mod_name = rel_path[:-3].replace(os.sep, ".")
                spec = importlib.util.spec_from_file_location(mod_name, os.path.join(root, fname))
                mod = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(mod)
                extensions.append(mod)
    return extensions

def get_arg_parser():
    parser = argparse.ArgumentParser(description="–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ç–æ—Ä ERP-–º–æ–¥—É–ª—è")
    parser.add_argument(
        '--mode',
        choices=['admin', 'user'],
        required=True,
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫—É: admin –∞–±–æ user'
    )
    return parser.parse_args()

def main():
    args = get_arg_parser()
    extensions = load_extensions()

    if not QApplication.instance():
        app = QApplication(sys.argv)
        app.setStyle("Fusion") #WindowsVista
        # window = QWidget()
        # window.show()

    config = AppConfig(
        is_admin=(args.mode == "admin"),
        extensions=extensions
    )

    if config.is_admin:
        log_event("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        log_event("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

    cfg = select_database(None, config.extensions)
    # if cfg:
    #     log_event(f"‚úÖ –ë–∞–∑—É –æ–±—Ä–∞–Ω–æ: {cfg['database']} –Ω–∞ {cfg['server']}")
    #     # for ext in config.extensions:
    #     #     if hasattr(ext, "on_database_selected"):
    #     #         ext.on_database_selected(cfg)   
    # else:
    #     log_event("‚ùå –ë–∞–∑—É –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî –≤–∏—Ö—ñ–¥")
    #     return

    # cfg = load_config()
    # if not cfg:
    #     return

    #     log_event("‚ö†Ô∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥")
    #     cfg = show_config_dialog()
    #     if cfg:
    #         save_config(cfg)
    #         log_event("üì• –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞")
    #     else:
    #         log_event("‚ùå –ù–µ–º–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ‚Äî –≤–∏—Ö—ñ–¥")
    #         return

    # if test_connection(cfg):
    #     log_event("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
    # else:
    #     log_event("‚ùå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è")
    #     # cfg = show_config_dialog()
    #     # if cfg:
    #     #     save_config(cfg)
    #     #     initialize_database(cfg)
    #     #     log_event("üõ†Ô∏è –ë–∞–∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    #     # else:
    #     #     log_event("‚ùå –í–∏—Ö—ñ–¥ –±–µ–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
    #     #     return

    launch_main_ui(config)

if __name__ == "__main__":
    main()